## ---------------------------
## Script name: VIRAL TRACK: Viral_Scanning: Module 2 - SAMTOOLS SORTING
## Function: Map Single Cell Virals from individual FASTQ file using STAR.
## Author: Pierre Bost (as used in Viral TRACK paper). Updated by Lauren Overend (LEO)
##
## Date Created: 2020 - June 
##
## Email: lauren.overend@oriel.ox.ac.uk
##
## ---------------------------
##
## Notes:
##   
##
## ---------------------------
if(nzchar(system.file(package = "optparse"))==FALSE){
  stop("optparse not installed. Terminating. \n")
}
suppressMessages(library(optparse))
parser <- OptionParser()
option_list <- list( 
  make_option(c("-n", "--nThreadmap"), action="store", default=8, type="integer", help="runThreadN for Star Mapping [default]"),
  make_option(c("-o", "--outputdir"), action="store", default='/well/immune-rep/users/kvi236/VIRUS/TEST', type="character", help="Path to output directory"),
  make_option(c("-i", "--indexgenome"), action="store", type="character", default="/well/immune-rep/users/kvi236/VIRAL_TRACK_REFERENCE_COVID/", help="Path to VIRAL TRACK reference genome [default]"),
  make_option(c("-s", "--nThreadsort"), action="store", type="integer", default=1, help="outBAMsortingThreadN for STAR Mapping [default] - usually < runThreadN"),
  make_option(c("-m", "--minreads"), action="store", type="integer", default=50, help="Minimum number of mapped viral reads [default]"),
  make_option(c("-b", "--bins"), action="store", type="integer", default=60, help="outBAMsortingBinsN for STAR Mapping [default]"),
  make_option(c("-f", "--fastq"), action="store", type="character", default = '/well/immune-rep/shared/10X_GENOMICS/EBV_LCLS/FASTQ/SRR8427168/DOWNSAMPLES/sub10k.fa', help="Path to input FASTQ file [default]"),
  make_option(c("-r", "--runname"), action="store", type="character", default="Viral_Track", help="Run Name [default]"),
  make_option(c("-v", "--viralannotation"), action="store", type="character", default="/well/immune-rep/users/kvi236/VIRUS/VIRAL_TRACK/Virusite_annotation_file.txt", help="Path to VirusSite annotation file [default]")
)

opt_parser = OptionParser(option_list=option_list);
opt = parse_args(opt_parser, print_help_and_exit = TRUE, args = commandArgs(trailingOnly = TRUE) )

if (is.null(opt$fastq)){
  stop("No FASTq file provided. Terminating. \n", call.=FALSE)
}
if (is.null(opt$outputdir)){
  stop("Output directory not present: must be specified. Terminating. \n", call.=FALSE)
}
if (opt$runname == "Viral_Track"){
  warning("Using Default Run-Name: Reconsider using Custom Run-Name. \n")
}
if (!dir.exists(opt$outputdir)) {
  warning("Output directory does not exist! Creating it! \n")
  dir.create(opt$outputdir)
}
if (!is.numeric(opt$nThreadmap) | opt$nThreadmap < 1 ) {
  stop("STAR Mapping Threads are Incorrect. Terminating. \n")
}
if (!is.numeric(opt$nThreadsort)) {
  stop("STAR BAM Sorting Threads are incorrect. Terminating. \n")
}
if (opt$nThreadsort > 1 ) {
  warning("STAR BAM Sorting Threads are higher than recommended (Default: 1). Consider adjusting paramaters.  \n")
}
if (!dir.exists(opt$indexgenome)) {
  stop("Index Genome Directory Does Not Exist. Terminating. \n")
}
if (!file.exists(opt$viralannotation)) {
  stop("VirusSite Database File Does Not Exist. Terminating. \n")
}

if (opt$nThreadmap >= round(0.8*detectCores(),0) ) {
  stop("Not enough threads available. Terminating. \n")
}
if (opt$nThreadsort > opt$nThreadmap ) {
  warning("Bam Sorting Threads exceeds Bam Mapping Threads. May be incompatible with memory request. \n")
}

## Check all packages are installed. 
if(nzchar(system.file(package = "Biostrings"))==FALSE){
  stop("Biostrings not installed. Terminating. \n")
} 
if(nzchar(system.file(package = "ShortRead"))==FALSE){
  stop("ShortRead not installed. Terminating. \n")
}
if(nzchar(system.file(package = "doParallel"))==FALSE){
  stop("doParallel not installed. Terminating. \n")
}
if(nzchar(system.file(package = "GenomicAlignments"))==FALSE){
  stop("GenomicAlignments not installed. Terminating. \n")
}

## Check validity of FASTQ File
List_target_path = c()
if (!is.null(opt$fastq)) {
  if(file.exists(opt$fastq)){
    cat("FATSQ File present. \n") 
    if(any(grepl(".fa|.fq|.fasta", opt$fastq))==TRUE){
      cat("FASTQ File Type is Valid. \n")
      List_target_path = opt$fastq
    } else {
      stop("Fastq File Provided is Not of Type '.fasta/.fq/.fa'. Terminating. \n")
    }
  } else {
    stop("FASTQ provided but Path is Invalid. Terminating. \n")
  }
} else {
  stop("No FASTQ File Provided. Terminating. \n")
}

## Load Required Libraries
suppressMessages(library(Biostrings))
suppressMessages(library(ShortRead))
suppressMessages(library(doParallel))
suppressMessages(library(GenomicAlignments))

## Setting up log.file: 
log <-  paste0(opt$outputdir, "/ViralTrack_Scanning_Module1_", opt$fastq, ".log")

## Checking the parameters values
cat("ViralTrack_Scanning.2.0 by Lauren Overend & Pierre Bost \n", file=log, append=TRUE)
cat(paste0("Run Name: ", opt$runname, "\n"), file=log, append=TRUE)
start_time <- Sys.time()
cat(paste0("Start time: ", start_time, "\n"), file=log, append=TRUE)
cat(paste0("Output directory: ", opt$outputdir, "\n"), file=log, append=TRUE)
cat(paste0("FASTQ File: ", opt$fastq, "\n"), file=log, append=TRUE)
cat("----------------------------------------------\n", file=log, append=TRUE)
cat("Input Parameters Read and Validated. Commencing Viral Track. \n", file=log, append = TRUE)


##--------------------------------------------------------------
## Renaming Paramaters to original variable names as in ViralTrack1.0
N_thread = opt$nThreadmap 
N_thread_sort = opt$nThreadsort
N_bins = opt$bins
Output_directory = opt$outputdir 
Name_run = opt$runname    
Index_genome = opt$indexgenome 
Minimal_read_mapped = as.numeric(opt$minreads)
Viral_annotation_file = opt$viralannotation
name_target = unlist(base::strsplit(List_target_path,"/",fixed = T))
name_target = name_target[length(name_target)]
name_target = gsub('/','',name_target)
is_gz_file = any(grepl(pattern = ".gz",name_target))
name_target = gsub('.fastq|.fa|.fq|.gz','',name_target)   #Cleaning the name to get the original Amplification batch number
temp_output_dir = paste(Output_directory, "/", name_target,sep = "")
dir.create(temp_output_dir)
cat(paste0("Mapping: ",name_target,".fastq file \n"), file=log, append = TRUE)
start_time <- Sys.time()
cat(paste0("Start time: ", start_time, "\n"), file=log, append=TRUE)
name_prefix = paste0(temp_output_dir, "/", name_target)
temp_sorted_bam = paste0(name_prefix, "Aligned.sortedByCoord.out.bam")
## -------------------------------------------------------------- 
## --------------------------------------------------------------  

#To begin with : the ordered .BAM file need to indexed
SAMtools_indexing_command = paste("samtools index",temp_sorted_bam)
system(SAMtools_indexing_command)
cat(paste0("Indexing of the bam file for",name_target,"is done \n"), file="Viral_track_scanning.log", append = TRUE)
#Then we need to compute the number of mapped reads for each chromosome/virus
temp_chromosome_count_path = paste(temp_output_dir,"/Count_chromosomes.txt",sep = "")
SAMtools_chromosome_count_command = paste("samtools idxstats",temp_sorted_bam,">",temp_chromosome_count_path)
system(SAMtools_chromosome_count_command)
cat(paste0("Computing stat file for the bam file for",name_target,"is done \n"), file="Viral_track_scanning.log", append = TRUE)  
## ---------------------------------------------------------------------------------------------------------------


